// <auto-generated />
using System;
using Codere.Contexto;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Codere.Migrations
{
    [DbContext(typeof(ContextoDB))]
    partial class ContextoDBModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Codere.Models.Country", b =>
                {
                    b.Property<int>("Id_key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_key"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("IdPadre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeZone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_key");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Codere.Models.DvdCountry", b =>
                {
                    b.Property<int>("Show_Id")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Id_key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_key"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeZone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Show_Id");

                    b.ToTable("DvdCountries");
                });

            modelBuilder.Entity("Codere.Models.External", b =>
                {
                    b.Property<int>("Show_Id")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Id_key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_key"));

                    b.Property<string>("Imdb")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Thetvdb")
                        .HasColumnType("int");

                    b.Property<int?>("Tvrage")
                        .HasColumnType("int");

                    b.HasKey("Show_Id");

                    b.ToTable("Externals");
                });

            modelBuilder.Entity("Codere.Models.Image", b =>
                {
                    b.Property<int?>("Show_Id")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Id_key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_key"));

                    b.Property<string>("Medium")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Original")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Show_Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Codere.Models.Link", b =>
                {
                    b.Property<int?>("Show_Id")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Id_key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_key"));

                    b.Property<string>("Previousepisode_Href")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Previousepisode_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Self_Href")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Show_Id");

                    b.ToTable("Links");
                });

            modelBuilder.Entity("Codere.Models.Network", b =>
                {
                    b.Property<int>("Show_Id")
                        .HasColumnType("int");

                    b.Property<int?>("Country_Id")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Id_key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_key"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficialSite")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Show_Id");

                    b.ToTable("Networks");
                });

            modelBuilder.Entity("Codere.Models.PreviousEpisode", b =>
                {
                    b.Property<int>("Show_Id")
                        .HasColumnType("int");

                    b.Property<string>("Href")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Id_key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_key"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Show_Id");

                    b.ToTable("PreviousEpisodes");
                });

            modelBuilder.Entity("Codere.Models.Rating", b =>
                {
                    b.Property<int>("Show_Id")
                        .HasColumnType("int");

                    b.Property<double?>("Average")
                        .HasColumnType("float");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Id_key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_key"));

                    b.HasKey("Show_Id");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("Codere.Models.Schedule", b =>
                {
                    b.Property<int?>("Show_Id")
                        .HasColumnType("int");

                    b.Property<string>("Day")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Id_key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_key"));

                    b.Property<string>("Time")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Show_Id");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("Codere.Models.Show", b =>
                {
                    b.Property<int>("IdKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdKey"));

                    b.Property<int?>("AverageRuntime")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Ended")
                        .HasColumnType("datetime2");

                    b.Property<string>("Genres")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficialSite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Premiered")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Rating_Average")
                        .HasColumnType("float");

                    b.Property<int?>("Runtime")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Updated")
                        .HasColumnType("float");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Weight")
                        .HasColumnType("int");

                    b.HasKey("IdKey");

                    b.ToTable("Shows");
                });

            modelBuilder.Entity("Codere.Models.ShowGenre", b =>
                {
                    b.Property<int>("Id_key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_key"));

                    b.Property<int?>("Genre_Id")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Show_Id")
                        .HasColumnType("int");

                    b.HasKey("Id_key");

                    b.ToTable("ShowGenres");
                });

            modelBuilder.Entity("Codere.Models.WebChannel", b =>
                {
                    b.Property<int>("Show_Id")
                        .HasColumnType("int");

                    b.Property<int?>("Country_Id")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Id_key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_key"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficialSite")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Show_Id");

                    b.ToTable("WebChannels");
                });

            modelBuilder.Entity("Codere.Models.DvdCountry", b =>
                {
                    b.HasOne("Codere.Models.Show", "Show")
                        .WithOne("DvdCountry")
                        .HasForeignKey("Codere.Models.DvdCountry", "Show_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Show");
                });

            modelBuilder.Entity("Codere.Models.External", b =>
                {
                    b.HasOne("Codere.Models.Show", "Show")
                        .WithOne("External")
                        .HasForeignKey("Codere.Models.External", "Show_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Show");
                });

            modelBuilder.Entity("Codere.Models.Image", b =>
                {
                    b.HasOne("Codere.Models.Show", "Show")
                        .WithOne("Image")
                        .HasForeignKey("Codere.Models.Image", "Show_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Show");
                });

            modelBuilder.Entity("Codere.Models.Link", b =>
                {
                    b.HasOne("Codere.Models.Show", "Show")
                        .WithOne("Link")
                        .HasForeignKey("Codere.Models.Link", "Show_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Show");
                });

            modelBuilder.Entity("Codere.Models.Network", b =>
                {
                    b.HasOne("Codere.Models.Show", "Show")
                        .WithOne("Network")
                        .HasForeignKey("Codere.Models.Network", "Show_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Show");
                });

            modelBuilder.Entity("Codere.Models.PreviousEpisode", b =>
                {
                    b.HasOne("Codere.Models.Show", "Show")
                        .WithOne("PreviousEpisode")
                        .HasForeignKey("Codere.Models.PreviousEpisode", "Show_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Show");
                });

            modelBuilder.Entity("Codere.Models.Rating", b =>
                {
                    b.HasOne("Codere.Models.Show", "Show")
                        .WithOne("Rating")
                        .HasForeignKey("Codere.Models.Rating", "Show_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Show");
                });

            modelBuilder.Entity("Codere.Models.Schedule", b =>
                {
                    b.HasOne("Codere.Models.Show", "Show")
                        .WithOne("Schedule")
                        .HasForeignKey("Codere.Models.Schedule", "Show_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Show");
                });

            modelBuilder.Entity("Codere.Models.WebChannel", b =>
                {
                    b.HasOne("Codere.Models.Show", "Show")
                        .WithOne("WebChannel")
                        .HasForeignKey("Codere.Models.WebChannel", "Show_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Show");
                });

            modelBuilder.Entity("Codere.Models.Show", b =>
                {
                    b.Navigation("DvdCountry")
                        .IsRequired();

                    b.Navigation("External")
                        .IsRequired();

                    b.Navigation("Image")
                        .IsRequired();

                    b.Navigation("Link")
                        .IsRequired();

                    b.Navigation("Network")
                        .IsRequired();

                    b.Navigation("PreviousEpisode")
                        .IsRequired();

                    b.Navigation("Rating")
                        .IsRequired();

                    b.Navigation("Schedule")
                        .IsRequired();

                    b.Navigation("WebChannel")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
